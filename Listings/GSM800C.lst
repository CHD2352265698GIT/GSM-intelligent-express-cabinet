C51 COMPILER V9.60.7.0   GSM800C                                                           05/27/2024 16:20:47 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE GSM800C
OBJECT MODULE PLACED IN .\Objects\GSM800C.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE GSM800C.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE DEBUG PRINT(.\Listings\GSM
                    -800C.lst) TABS(2) OBJECT(.\Objects\GSM800C.obj)

line level    source

   1          #include "gsm800c.h"
   2          #include "string.h"
   3          #include "stdio.h"
   4          #include "LCD12864.H"
   5          #include <stdlib.h>  
   6          #include "config.h"
   7          idata u8 Uart1_Buf[Buf1_Max];
   8          idata u8 Flag;//定时器标志位
   9          u8 First_Int = 0;
  10          
  11          idata GMS800C GMS;
  12          GMS800C* GET_GMS()
  13          {
  14   1        return &GMS;
  15   1      }
  16          
  17          code const char authcode[]="667a80fd5feb901267dcff0c9a8c8bc17801ff1a"; //验证码：Unicode
  18          
  19          char Rand_AuthCode(char max,char min)
  20          {
  21   1        return rand() % (max - min + 1) + min;
  22   1      }
  23          
  24          void Auth_Code(char* arr,char Length)
  25          {
  26   1        char i=0;
  27   1        for(i=0;i<Length;i++)
  28   1        arr[i] = Rand_AuthCode(9,0)+'0';
  29   1      }
  30          void ASCII_ToUnicode(char *arr,const char *str,char Length) 
  31          {   
  32   1          char i=0;
  33   1          char temp[4]="003";
  34   1          while (i != Length) {  
  35   2            temp[3] = str[i]; 
  36   2            memcpy(arr+(i*4),temp,4);
  37   2            i++;  
  38   2          }  
  39   1      } 
  40          
  41          void Auth_CodeToUnicode(char* Unicode,const char* arr,char Length)
  42          {
  43   1          ASCII_ToUnicode(Unicode,arr,Length);
  44   1      }
  45            
  46          void Make_AuthTo6(char* Unicode)
  47          {
  48   1        Auth_Code(p_PageDATA->AuthCode,6);
  49   1        Auth_CodeToUnicode(Unicode,p_PageDATA->AuthCode,6);
  50   1      }
  51          
  52          void delay1ms(void)   //误差 -0.651041666667us
  53          {
  54   1          unsigned char a,b;
C51 COMPILER V9.60.7.0   GSM800C                                                           05/27/2024 16:20:47 PAGE 2   

  55   1          for(b=102;b>0;b--)
  56   1              for(a=3;a>0;a--);
  57   1      }
  58          
  59          void delayms(unsigned int time)   //误差 -0.651041666667us
  60          {
  61   1        u16 b;
  62   1          for(b=time;b>0;b--)
  63   1             delay1ms();
  64   1      }
  65          
  66          
  67          void Uart1Init(void)    //9600bps@11.0592MHz
  68          {
  69   1          TMOD |= 0x20;
  70   1          SCON = 0x50;
  71   1          TH1 = 0xFD;
  72   1          TL1 = TH1;
  73   1          PCON = 0x00;
  74   1          EA = 1;
  75   1          ES = 1;
  76   1          TR1 = 1;
  77   1      }
  78          /*----------------------------
  79          UART1 发送串口数据
  80          -----------------------------*/
  81          void UART1_SendData(u8 dat)
  82          {
  83   1        ES=0;         //关串口中断
  84   1        SBUF=dat;     
  85   1        while(TI!=1); //等待发送成功
  86   1        TI=0;         //清除发送中断标志
  87   1        ES=1;         //开串口中断
  88   1      }
  89          
  90          char putchar(char c){
  91   1        //输出重定向到串口
  92   1        UART1_SendData(c);
  93   1        return c;  //返回给函数的调用者printf
  94   1      }
  95          
  96          void UART1_SendString(char *s)
  97          {
  98   1        while(*s)//检测字符串结束符
  99   1        {
 100   2          UART1_SendData(*s++);//发送当前字符
 101   2        }
 102   1      }
 103          
 104          
 105          void CLR_Buf1(void)
 106          {
 107   1        u16 k;
 108   1        for(k=0;k<Buf1_Max;k++)      //将缓存内容清零
 109   1        {
 110   2          Uart1_Buf[k] = 0x00;
 111   2        }
 112   1          First_Int = 0;              //接收字符串的起始存储位置
 113   1      }
 114          
 115          
 116          u8 Find(u8 *a)
C51 COMPILER V9.60.7.0   GSM800C                                                           05/27/2024 16:20:47 PAGE 3   

 117          { 
 118   1        if(strstr(Uart1_Buf,a)!=NULL)
 119   1            return 1;
 120   1        else
 121   1            return 0;
 122   1      }
 123          
 124          void Second_AT_Command(u8 *b,u8 *a,unsigned char Wait_Time)         
 125          {
 126   1        u8 i;
 127   1        u8 *c;
 128   1        c = b;                    //保存字符串地址到c
 129   1        CLR_Buf1(); 
 130   1        i = 0;
 131   1        while(i == 0)                    
 132   1        {
 133   2          if(!Find(a))           //查找需要应答的字符
 134   2          {
 135   3            if(p_GMS->Timer0_start == 0)//超时重新发送命令
 136   3            {
 137   4              b = c;             //将字符串地址给b
 138   4              for (b; *b!='\0';b++)
 139   4              {
 140   5                UART1_SendData(*b);
 141   5              }
 142   4              UART1_SendLR(); 
 143   4              delayms(Wait_Time);
 144   4              p_GMS->Timer0_start = 1;  //开始计时
 145   4             }
 146   3          }
 147   2          else
 148   2          {
 149   3              p_GMS->Timer0_start = 0;  //停止计时
 150   3              i = 1;//退出等待
 151   3          }
 152   2        }
 153   1        CLR_Buf1(); 
 154   1      }
 155          void Set_Text_Mode(void)
 156          {
 157   1        unsigned char temp[50]="AT+CSCA=";
 158   1        Second_AT_Command("ATE0","OK",0);                     //取消回显  
 159   1        Second_AT_Command("AT+CMGF=1","OK",0);                //TEXT模式  
 160   1        Second_AT_Command("AT+CSMP=17,167,1,8","OK",100);
 161   1        Second_AT_Command("AT+CSCS=\"UCS2\"","OK",0);         //设置字符集
 162   1      }
 163          
 164          void Send_AuTH(char* Phone)
 165          {
 166   1        unsigned char temp[55]="AT+CMGS=\"";
 167   1        ASCII_ToUnicode(p_GMS->PhoneToUnicode,Phone,11);       //电话转Unicode
 168   1        strcat(temp,p_GMS->PhoneToUnicode);                    //字符串拼接函数（库函数）
 169   1        strcat(temp,"\"");                                     //字符串拼接函数（库函数）
 170   1        Second_AT_Command(temp,">",0);                         //等待接收到“>”才发送短信内容
 171   1        Make_AuthTo6(p_PageDATA->AuthCodeToUnicode);           //生成6位验证码
 172   1        printf("%s%s",authcode,p_PageDATA->AuthCodeToUnicode);//验证码随机数
 173   1        UART1_SendData(0X1A);          //发送结束符
 174   1      }
 175            
 176          void Wait_CREG(void)
 177          {
 178   1        u8 i;
C51 COMPILER V9.60.7.0   GSM800C                                                           05/27/2024 16:20:47 PAGE 4   

 179   1        u8 k;
 180   1        i = 0;
 181   1        CLR_Buf1();
 182   1        while(i == 0)             
 183   1        {
 184   2          CLR_Buf1();
 185   2          UART1_SendString("AT+CREG?");//查询模块网络注册状态
 186   2          UART1_SendLR();
 187   2          delayms(1500);
 188   2           LED = !LED;   
 189   2            for(k=0;k<Buf1_Max;k++)           
 190   2            {
 191   3            if(Uart1_Buf[k] == ':')
 192   3            {
 193   4              if((Uart1_Buf[k+2] == '0')||(Uart1_Buf[k+4] == '1')) //表明网络注册成功
 194   4              {
 195   5                i = 1;
 196   5                return;
 197   5              }
 198   4            }
 199   3          }
 200   2        }
 201   1      }
 202          void Uart() interrupt 4
 203          {
 204   1          if (RI)
 205   1          {
 206   2            RI = 0;                 //清除RI位
 207   2            Uart1_Buf[First_Int++] = SBUF;      //将接收到的字符串存到缓存中
 208   2            if(First_Int == Buf1_Max-1)           //如果缓存满,将缓存指针指向缓存的首地址
 209   2            {
 210   3              First_Int = 0;
 211   3            }
 212   2          }
 213   1          if (TI)
 214   1          {
 215   2              TI = 0;                 //清除TI位
 216   2          }
 217   1      }
 218          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1109    ----
   CONSTANT SIZE    =    220    ----
   XDATA SIZE       =      1     156
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =    132    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
